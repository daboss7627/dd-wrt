#!/bin/sh
nv=/usr/sbin/nvram
ipt=/usr/sbin/iptables
ip6t=/usr/sbin/ip6tables
tunnels=$($nv get oet_tunnels)
#WAN_IF="$(ip route | awk '/^default/{print $NF}')"
WAN_IF=$(get_wanface)
FW_STATE="-m state --state NEW"
for i in $(seq 1 $tunnels); do
	if [[ -e "/tmp/oet/pid/f${i}.pid" ]]; then
		FW_CHAIN="pbr-oet${i}"
		WGDELRT="/tmp/wgdelrt_oet${i}"
		{
		$ipt -D FORWARD -i oet${i} -j ACCEPT
		$ipt -D FORWARD -o oet${i} -j ACCEPT
		$ipt -D INPUT -i oet${i} -j ACCEPT
		$ipt -D INPUT -p 47 -s `$nv get oet${i}_rem` -j ACCEPT
		$ipt -D INPUT -p 97 -s `$nv get oet${i}_rem` -j ACCEPT
		$ipt -D INPUT -p udp --dport `$nv get oet${i}_port` -j ACCEPT
		$ipt -t nat -D POSTROUTING -o oet${i} -j SNAT --to $($nv get oet${i}_ipaddr)
		$ipt -t nat -D POSTROUTING -o br+ -s $($nv get oet${i}_ipaddrmask) -j MASQUERADE
		$ipt -D FORWARD -o $WAN_IF $FW_STATE -j $FW_CHAIN
		$ipt -F $FW_CHAIN
		$ipt -X $FW_CHAIN
		$ipt -t mangle -D INPUT -p udp -m udp --dport `$nv get oet${i}_port` -j WGOBFS --key `$nv get oet${i}_obfkey` --unobfs
		$ipt -t mangle -D OUTPUT -p udp -m udp --sport `$nv get oet${i}_port` -j WGOBFS --key `$nv get oet${i}_obfkey` --obfs
		peers=$(($($nv get oet${i}_peers) - 1))
		for p in $(seq 0 $peers); do
			$ipt -t mangle -D INPUT -p udp -m udp --sport `$nv get oet${i}_peerport${p}` -j WGOBFS --key `$nv get oet${i}_obfkey${p}` --unobfs >/dev/null 2>&1
			$ipt -t mangle -D OUTPUT -p udp -m udp --dport `$nv get oet${i}_peerport${p}` -j WGOBFS --key `$nv get oet${i}_obfkey${p}` --obfs >/dev/null 2>&1
		done

		if [[ -f "$WGDELRT" ]]; then
			(while read route; do $route; done < $WGDELRT)
			rm $WGDELRT
		fi
		# remove because FW sets it by default
		$ipt -D FORWARD -i oet${i} $FW_STATE -j ACCEPT
		rm -f /tmp/oet/pid/f${i}.pid
		} >/dev/null 2>&1
	fi
done
for i in $(seq 1 $tunnels); do
	if [[ $($nv get oet${i}_en) -eq 1 ]]; then
		if [ $($nv get oet${i}_proto) -eq 1 ]; then
			$ipt -I INPUT -p 47 -s `$nv get oet${i}_rem` -j ACCEPT >/dev/null 2>&1
		fi
		if [ $($nv get oet${i}_proto) -eq 0 ]; then
			$ipt -I INPUT -p 97 -s `$nv get oet${i}_rem` -j ACCEPT >/dev/null 2>&1
		fi
		if [[ `$nv get oet${i}_bridged` -ne 1 && `$nv get oet${i}_proto` -ne 2 ]]; then
			$ipt -I FORWARD -i oet${i} -j ACCEPT >/dev/null 2>&1
			$ipt -I INPUT -i oet${i} -j ACCEPT >/dev/null 2>&1
		fi
		if [ $($nv get oet${i}_proto) -eq 2 ] && [ $($nv get oet${i}_obf) -eq 1 ]; then
			insmod xt_WGOBFS
			$ipt -t mangle -I INPUT -p udp -m udp --dport `$nv get oet${i}_port` -j WGOBFS --key `$nv get oet${i}_obfkey` --unobfs >/dev/null 2>&1
			$ipt -t mangle -I OUTPUT -p udp -m udp --sport `$nv get oet${i}_port` -j WGOBFS --key `$nv get oet${i}_obfkey` --obfs >/dev/null 2>&1
		fi
		if [ $($nv get oet${i}_proto) -eq 2 ]; then
			peers=$(($($nv get oet${i}_peers) - 1))
			for p in $(seq 0 $peers); do
				if [ $($nv get oet${i}_obf${p}) -eq 1 ]; then
					insmod xt_WGOBFS
					$ipt -t mangle -I INPUT -p udp -m udp --sport `$nv get oet${i}_peerport${p}` -j WGOBFS --key `$nv get oet${i}_obfkey${p}` --unobfs >/dev/null 2>&1
					$ipt -t mangle -I OUTPUT -p udp -m udp --dport `$nv get oet${i}_peerport${p}` -j WGOBFS --key `$nv get oet${i}_obfkey${p}` --obfs >/dev/null 2>&1
				fi
			done
		fi
		if [ $($nv get oet${i}_proto) -eq 2 ] && [[ $($nv get oet${i}_failgrp) -ne 1 || $($nv get oet${i}_failstate) -eq 2 ]]; then
			WGDELRT="/tmp/wgdelrt_oet${i}"
			if [ $($nv get oet${i}_mit) -eq 1 ]; then
				insmod xt_addrtype >/dev/null 2>&1
				echo "$ipt -t raw -D PREROUTING ! -i oet${i} -d $(getipmask oet${i}) -m addrtype ! --src-type LOCAL -j DROP" >> $WGDELRT
				$ipt -t raw -I PREROUTING ! -i oet${i} -d $(getipmask oet${i}) -m addrtype ! --src-type LOCAL -j DROP
				#$ipt -t raw -I PREROUTING ! -i oet${i} -d $(getipmask oet${i}) -j DROP
			fi
			#add NAT out for DDWRT client
			if [[ $($nv get oet${i}_natout) -eq 1 ]]; then
				$ipt -t nat -I POSTROUTING -o oet${i} -j SNAT --to $($nv get oet${i}_ipaddr) >/dev/null 2>&1
			fi
			#add NAT via br0 to allow seamless LAN access
			if [[ $($nv get oet${i}_lanac) -eq 1 ]]; then
				$ipt -t nat -I POSTROUTING -o br+ -s $($nv get oet${i}_ipaddrmask) -j MASQUERADE >/dev/null 2>&1
			fi
			#split DNS tunnel for PBR
			if [[ ! -z "$($nv get oet${i}_dns | sed '/^[[:blank:]]*#/d')" ]] && [[ $($nv get oet${i}_spbr) -ne 0 && $($nv get oet${i}_dnspbr) -eq 1 ]]; then
				logger -p user.info "WireGuard Split DNS tunnel for PBR"
				[[ $($nv get oet${i}_spbr) -eq 1 ]] && { dnsserver=$($nv get oet${i}_dns); dnsserver=${dnsserver%%,*}; } || { dnsserver=$($nv get wan_dns); dnsserver=${dnsserver%% *}; }
				echo $($nv get oet${i}_spbr_ip), | while read -d ',' pbrip; do
					pbrip=$(echo $pbrip)
						case $pbrip in
						 [0-9]*)
							sourcepbr="-s"
							;;
						 iif*)
							sourcepbr="-i"
							#pbrip=${pbrip#* }
							pbrip="${pbrip#iif }"
							;;
						 *)
							continue
							;;
						esac
					echo "$ipt -t nat -D PREROUTING -p udp $sourcepbr $pbrip --dport 53 -j DNAT --to $dnsserver" >> $WGDELRT
					echo "$ipt -t nat -D PREROUTING -p tcp $sourcepbr $pbrip --dport 53 -j DNAT --to $dnsserver" >> $WGDELRT
					$ipt -t nat -I PREROUTING -p udp $sourcepbr $pbrip --dport 53 -j DNAT --to $dnsserver
					$ipt -t nat -I PREROUTING -p tcp $sourcepbr $pbrip --dport 53 -j DNAT --to $dnsserver
				done
			fi
			#killswitch
			if [[ $($nv get oet${i}_killswitch) -eq 1 ]]; then
				#For WAP or Bridge, use br0 as IN_IF
				[[ $($nv get wan_proto) = "disabled" ]] && { IN_IF="-i br0"; logger -p user.info "WireGuard Killswitch for WAP on br0 only!, oet${i}"; } || IN_IF=""
				if [[ $($nv get oet${i}_spbr) -ne 1 ]]; then
					logger -p user.info "WireGuard Killswitch activated for all clients!"
					echo "$ipt -D FORWARD $IN_IF -o $WAN_IF -j REJECT" >> $WGDELRT
					$ipt -I FORWARD $IN_IF -o $WAN_IF -j REJECT
					#todo restart SFE/CTF to cut existing connections
					#cat /proc/net/ip_conntrack_flush 2>&1
					#cat /proc/sys/net/netfilter/nf_conntrack_flush 2>&1
				fi
				if [[ $($nv get oet${i}_spbr) -eq 2 ]]; then  # alternatively use -ne 0 so that block is alos set but should not be necessary as PBR table with prohibited default takes care of this
					#PBR killswitch
					logger -p user.info "WireGuard firewall on PBR activated for oet${i}"
					FW_CHAIN="pbr-oet${i}"
					$ipt -N $FW_CHAIN
					echo $($nv get oet${i}_spbr_ip), | while read -d ',' pbrip; do	# added "," so that last entry is read
						pbrip=$(echo $pbrip)
						case $pbrip in
						 [0-9]*)
							sourcepbr="-s"
							;;
						 iif*)
							sourcepbr="-i"
							#pbrip=${pbrip#* }
							pbrip="${pbrip#iif }"
							;;
						 *port*)
							sourcepbr="port"
							pbrip="--$pbrip"
							;;
						 *)
							continue
							;;
						esac
						#if [[ $($nv get oet${i}_spbr) -eq 1 ]]; then
						#	$ipt -A $FW_CHAIN $sourcepbr $pbrip -j REJECT >/dev/null 2>&1
						#elif [[ $($nv get oet${i}_spbr) -eq 2 ]]; then
						if [[ $sourcepbr = "port" ]];then
							$ipt -A $FW_CHAIN -p tcp $pbrip -j ACCEPT >/dev/null 2>&1
							$ipt -A $FW_CHAIN -p udp $pbrip -j ACCEPT >/dev/null 2>&1
						else
							$ipt -A $FW_CHAIN $sourcepbr $pbrip -j ACCEPT >/dev/null 2>&1
						fi
					done
					$ipt -I FORWARD $IN_IF -o $WAN_IF -j $FW_CHAIN
				fi
			fi
			#end kill switch
			#New Inbound opening of firewall for site-to-site
			if [[ $($nv get oet${i}_firewallin) -eq 0 ]]; then
				echo "$ipt -D INPUT -i $WAN_IF -p udp --dport $($nv get oet${i}_port) -j ACCEPT" >> $WGDELRT
				echo "$ipt -D FORWARD -i oet${i} $FW_STATE -j ACCEPT" >> $WGDELRT
				echo "$ipt -D INPUT -i oet${i} $FW_STATE -j ACCEPT" >> $WGDELRT
				$ipt -I INPUT -i $WAN_IF -p udp --dport $($nv get oet${i}_port) -j ACCEPT >/dev/null 2>&1
				$ipt -I FORWARD -i oet${i} $FW_STATE -j ACCEPT >/dev/null 2>&1
				$ipt -I INPUT -i oet${i} $FW_STATE -j ACCEPT >/dev/null 2>&1
				#For IPv6
				if [[ $($nv get ipv6_enable) -eq 1 ]]; then
					echo "$ip6t -D INPUT -i $WAN_IF -p udp --dport $($nv get oet${i}_port) -j ACCEPT" >> $WGDELRT
					echo "$ip6t -D FORWARD -i oet${i} $FW_STATE -j ACCEPT" >> $WGDELRT
					echo "$ip6t -D INPUT -i oet${i} $FW_STATE -j ACCEPT" >> $WGDELRT
					$ip6t -I INPUT -i $WAN_IF -p udp --dport $($nv get oet${i}_port) -j ACCEPT >/dev/null 2>&1
					$ip6t -I FORWARD -i oet${i} $FW_STATE -j ACCEPT >/dev/null 2>&1
					$ip6t -I INPUT -i oet${i} $FW_STATE -j ACCEPT >/dev/null 2>&1
				fi
				logger -p user.info "WireGuard Inbound Firewall deactivated on oet${i}"
			fi


			#end inbound firewall
			# todo make escape rules for destination based routing on by default
			# use wgdpbrip_oetx but wait till file is made
		fi
		echo enable > /tmp/oet/pid/f${i}.pid
	fi
done
